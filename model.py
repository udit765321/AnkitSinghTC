# -*- coding: utf-8 -*-
"""prosper-loan-final (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A63ZJsGV-NoI7RVM3C7rDkY0VpyEZx7f
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
print("Setup Complete")




 
 
# Authenticate and create the PyDrive client.

 
import pandas as pd
 
df = pd.read_csv('prosperLoanData.csv')
print(df)

# those are current, completed and cancelled are categorize as completed (1)otherwise defaulted(0)
df['LoanStatus'] = np.where((df['LoanStatus'] == 'Current')|(df['LoanStatus'] == 'Completed')|(df['LoanStatus'] == 'Cancelled'), 1, 0)
df['EmploymentStatus'] = np.where((df['EmploymentStatus'] == 'Employed'),   1, 0)
df['IsBorrowerHomeowner'] = np.where((df['IsBorrowerHomeowner'] == True), 1, 0)

from sklearn.preprocessing import LabelEncoder
le_Occupation = LabelEncoder()
le_CreditGrade = LabelEncoder()

print(df['CreditGrade'].value_counts())

df['CreditGrade'] = le_CreditGrade.fit_transform(df['CreditGrade'])

print(df['CreditGrade'].value_counts())

df=df.fillna(0)

cells=['CreditGrade','MonthlyLoanPayment','AvailableBankcardCredit','LP_InterestandFees',
        'DebtToIncomeRatio', 'StatedMonthlyIncome','LoanOriginalAmount',
       'LP_CustomerPayments', 'LP_CollectionFees' ]

x=df[cells]
y=df['LoanStatus']

x.describe()

x.info()

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2, random_state=1, stratify=y)
print(x.shape,x_train.shape,x_test.shape)
print(y.shape,y_train.shape,y_test.shape)
print(y_train.value_counts(normalize=True)*100)
print(y_test.value_counts(normalize=True)*100)

"""# Decision Tree"""

# Logistic Regression
model = tree.DecisionTreeClassifier()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
print('model score : ',model.score(x_test,y_test))
print('\n\n',confusion_matrix(y_test,y_pred))
print('\n\n',classification_report(y_test,y_pred))
print('\n\n',accuracy_score(y_test, y_pred))

plt.figure(figsize=(15,10))
feat_importance=pd.Series(model.feature_importances_ ,index=x.columns)
feat_importance.nlargest(25).plot(kind='barh')
plt.show()

import pickle

with open('model_pickle','wb') as file:
    pickle.dump(model,file)

with open('model_pickle','rb') as file:
    mp = pickle.load(file)